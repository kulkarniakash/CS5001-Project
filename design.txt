Design of Project

Disclaimers and Useful Information before play:

1) "Single player" in the program means one human player and one computer player

2) The score text above the board does not update until the next game.

3) The single player option is built for a 6x7 board and will most likely take a very long time or even crash if the size of the board is greater than 6x7. One possible solution is to decrease the value of the DIFFICULTY constant found in game.py so that the algorithm that calculate the computer's next move has a shorter run time and thus faster game play.

4) As hinted in the previous point, increasing the value of the DIFFICULTY constant will make the game harder but also exponentially slower

5) Please run the driver.py file to play the game


Features of the game:

1) Buttons for oncreen options like single player mode, two player moder, computer plays first, computer plays second and rewind.

2) Option to play against computer

3) Falling coin animation

4) Computer play strategically. It traverses all possible sequences of moves upto a certain depth and calculates the optimal move based on the number of victories each possible move offers. A more detailed description of strategy is available in the methods section of Game.

5) Option to rewind/reverse a move played. The functionality differs slightly between single player and two player modes.


Salient features of design:

1) The buttons on every screen are instances of the Button class

2) Recursion was used to calculate the computer's next move

3) The ButtonManager class manages clickevents for multiple buttons



Level Accomplished: A+

Classes defined:


A) Game:

NOTE: 
Attributes:

1) buttonManager (None or ButtonManager): handles clickevents for possibly multiple buttons

2) sequenceOfMoves (stack implemented as list): stores sequence of moves played for the rewind 
functionality

3) complPlaysFirst (boolean): a parameter passed to the constructor indicating whether the computer plays first in a single player game

4) board (list or list of lists): stores the current state of the board eg. [["r","y"], ["y","r"],[],[],[],[],[]].

5) toPlay (string): indicates whose turn ("r" for red, "y" for yellow) it is to play

6) h_holes (int): number of vertical holes in one column

7) w_holes (int): number of horizontal holes in one row

8) radius (int): radius of one hole in the board

9) boardColor

10) width (int): calculated width of board in pixels

11) height (int): calculated height of board in pixels

12) isAnimating (bool): indicates to event handlers whether an animation is going on, and if so that they need to stop listening for clicks. Can also be used if one wants to stop listening for clicks for any other reason.

13) isSinglePlayer(bool): whether the game is a single player game

14) winner (string): either "r" or "y" or ""

15) coinsPlayed (int): keeps track of number of coins played in case game ends in draw

16) filename (string): name of file scores are stored in

17) redScore (string)

18) yellowScore (string) 

Methods:

NOTE: paramter types and return types are written in comments in the original code

1) initializeScreen(): sets up turtle screen, and the rewind button

2) loadScores(): opens the score file and stores the scores in class attributes. By default, the scores are zero, if the file cannot be opened.

3) writeScores(): opens the score file and write the socres into file after the game ends. Handles errors.

4) displayScores(): displays scores above the board

5) initializeBoard(): initializes the board attribute with a number of nest empty lists, the number depending on the dimensions of the board

6) rewind(x,y): goes back one move in the case of two players and two moves in the case of single player

7) eraseLastCoin(buttonNumber): erases the coin present at the given button number. Is called by rewind. 

8) displayTurn(): displays whose turn it is

9) displayWinner()

10) displayDraw(): displays the appropriate text when it is a draw

11) fetchWinner(buttonNumber): analyzes the board and given the most recently played position, 
infers whether there is a winner and who

12) compMove(): calls winningMoves to strategically calculate the most optimal move according to the algorithm and then return that move

13) winningMoves_aux(board, depth, level): a function that helps winningMoves(). The strategy of the computer is as follows: given at most "w_holes" possibles moves, construct a recursion tree that consists of the move as nodes and possible subsequent moves as children. Given a particular hypothetical board position that the computer has played, it calculates the total number of weighted victories that the computer can achieve with a partiuclar move that is within a certain distance from the root node. Victories are wieghted by how far away they are and losses are counted as negative victories. If a loss is incurred immediately after the computer's turn, it's assigned the value -1000. 

14) winningMoves(board, depth, level): returns the most optimal move for the computer to make according to an algorithm. It sends the atmost "w_holes" possible moves as parameters to winningMoves_aux, stores the number of victories possible with that move in a list, and returns the move with the maximum number of victories. Victories can be negative.

15) addCoinToBoard(buttonNumber): appends a coin value to the attribute "board"

16) pause(seconds): pauses the program for certain number of seconds. Useful to give the illusion of a coin dropping.

17) dropAnimation(buttonNumber): creates the animation of a coin falling through the holes

18) handleCoinDrop(x, y, move=-1): callback function for when button is clicked. Figures out which button was clicked and then calls the necessary functions like addCoinToBoard and dropAnimation to complete the addition of a new coin to the board. The move parameter is set to -1 by default to indicate that the current move was initiated by a human. In case of a computer, move would assume a non-negative value.

19) renderBoard(size): renders the image part of the board.


B) ButtonManager:

Attributes:

1) buttons: a list of Button objects whose click events need to be handled
2) testVar: an attribute not used in the functionality of the class but for testing whether click events are handled correctly

Methods:

1) initializeScreen(): binds callback to eventlistener

2) callback(x_click, y_click): is responsible for calling the correct callback for a given click.

C) Button:

Attributes: 

1) callback()

2) x (int): x position of bottom left corner of button

3) y (int): y position of bottom left corner of button

4) textX (int): horizontal length of text

5) text (string): text of button

Methods:

1) isWithinBounds(x_click, y_click): checks whether the coordinates of a click are within the box of the button.

2) drawButton()



Data structures used: lists (for the board, sequenceOfMoves, etc.), dictionary (for storing the number of wins for each move the computer played), stack (sequenceOfMoves implemented using lists), tuple (for storing coordinates and size of board)

Non-class functions:

1) createTwoPlayerGame(width, height)

2) createSinglePlayerGame(width, height): clears the screen and prompts the user for the choice of playing first or second in the form of buttons. 

3) initializeGame(isSinglePlayer, size, comPlaysFirst=False): initializes a new game with the given parameters. This includes creating the screen, loading scores, rendering the board, etc.

4) main(): Prompts the user with choices to play single player or two player and asks the user to set the dimensions of the board.




Testing of the graphics component of the program was done at each stage of development.
A potential overflow of coins was tested for by attempting torepeatedly dropping coins 
in the same column beyond full capacity. Superfluous clicks were tested for by clicking
the same drop button rapidly in succession while a coin was still falling. 