


Level Accomplished: A+

Classes defined:

A) Game:

NOTE: "Single player" in the program means one human player and one computer player
Attributes:

NOTE: The score text above the board does not update until the next game.

1) buttonManager (None or ButtonManager): handles clickevents for possibly multiple buttons

2) sequenceOfMoves (stack implemented as list): stores sequence of moves played for the rewind 
functionality

3) complPlaysFirst (boolean): a parameter passed to the constructor indicating whether the computer plays first in a single player game

4) board (list or list of lists): stores the current state of the board eg. [["r","y"], ["y","r"],[],[],[],[],[]].

5) toPlay (string): indicates whose turn ("r" for red, "y" for yellow) it is to play

6) h_holes (int): number of vertical holes in one column

7) w_holes (int): number of horizontal holes in one row

8) radius (int): radius of one hole in the board

9) boardColor

10) width (int): calculated width of board in pixels

11) height (int): calculated height of board in pixels

12) isAnimating (bool): indicates to event handlers whether an animation is going on, and if so that they need to stop listening for clicks. Can also be used if one wants to stop listening for clicks for any other reason.

13) isSinglePlayer(bool): whether the game is a single player game

14) winner (string): either "r" or "y" or ""

15) coinsPlayed (int): keeps track of number of coins played in case game ends in draw

16) filename (string): name of file scores are stored in

17) redScore (string)

18) yellowScore (string) 

Methods:

NOTE: paramter types and return types are written in comments in the original code

1) initializeScreen(): sets up turtle screen, and the rewind button

2) loadScores(): opens the score file and stores the scores in class attributes. By default, the scores are zero, if the file cannot be opened.

3) writeScores(): opens the score file and write the socres into file after the game ends. Handles errors.

4) displayScores(): displays scores above the board

5) initializeBoard(): 





Testing of the graphics component of the program was done at each stage of development.
A potential overflow of coins was tested for by attempting torepeatedly dropping coins 
in the same column beyond full capacity. Superfluous clicks were tested for by clicking
the same drop button rapidly in succession while a coin was still falling. 